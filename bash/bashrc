# ---------------------------   Functions    -----------------------------------

# https://github.com/rwxrob/dot/blob/main/.bashrc
_pathclean() {
 local arg
 for arg in "$@"; do
    # middle
    PATH=${PATH//:${arg}:/:}
    # front
    PATH=${PATH/#${arg}:/}
    # end
    PATH=${PATH/%:${arg}/}
    export PATH
 done

}

pathappend() {
  local arg
  for arg in "$@"; do
    _pathclean "${arg}"
    test -d "${arg}" || continue
    export PATH="${PATH:+"${PATH}:"}${arg}"
  done
}

pathprepend() {
  local arg
  for arg in "$@"; do
    _pathclean "${arg}"
    test -d "${arg}" || continue
    export PATH="${arg}${PATH:+":${PATH}"}"
  done
}

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

pathappend "${HOME}/scripts/general"

# file permissions: rwxr-xr-x
umask 022

# if bash is interactive shell ... bind ... and allow Ctrl-S to search forward through history by deactivating XON/XOFF (in KDE Konsole)
[[ $- = *i* ]] && bind TAB:menu-complete && stty -ixon

# Aktiviere Tab-Vervollständigung.
# siehe: https://superuser.com/questions/59175/is-there-a-way-to-make-bash-more-tab-friendly
# Mit Shift+Tab einen Eintrag in der Tab-Vervollständigung zurück gehen.
bind '"\e[Z":menu-complete-backward'

# Netter Trick ...
#     sudo ls -l | sudo dd of=/prod/test.txt
# ... falls man nicht in eine Datei umleiten darf
# (also "sudo ls -l > test.txt" ist nicht erlaubt)
# kann man es so dennoch erreichen.
# Siehe: https://stackoverflow.com/a/8213307

# Uncomment next line to enable the builtin emacs(1) command line editor
# in sh(1), e.g. C-a -> beginning-of-line.
# set -o emacs

# ---------------------------   History  ---------------------------------------

export HISTCONTROL=ignoreboth
export HISTFILESIZE=10000
export HISTSIZE=5000
shopt -s histappend

# ---------------------------   Variables   ------------------------------------

export EDITOR=vim
export PAGER=less
export SVN_EDITOR=vim
export LESS='eFRX --jump-target=.5'



# ---------------------------   Aliases   --------------------------------------
alias h='fc -l'
alias j=jobs
# m: Enthält dann z.B. 'more' (statt less) als Pager.
alias m='$PAGER'

# Meine Aliase
alias c='clear'
alias cd..='cd ..'
alias g='gmake'
alias gbi='gmake && gmake install' # (gmake) (b)uild and (i)nstall
alias gmc='gmake clean' # gc should not be use because of it being the gnu-compiler
alias gst='git status'
alias vimeod='vim -S ~/vimsessions/eod-session.vim' # start vim with eod-session (end of day).
alias vi='vim'
alias grep='grep --color=auto -E'
alias pcregrep='pcregrep --color=auto'
alias dirsize="find . -type d -name '[!.]*' -exec du -sh {} +"

# The space at the end is necessary for it to work!
alias sudo='sudo '

# c = configure ... bash, etc.
alias cbash='vim ~/.bashrc'
alias cvim='vim ~/.vimrc'


# ---------------------------   Prompt Definition   ----------------------------

# Genauere Zeit vllt. über Perl: perl -MTime::HiRes=gettimeofday -MPOSIX=strftime -e '($s,$us) = gettimeofday(); printf "%d.%06d\n", $s, $us'
# \t Zeit 24 in HH:MM:SS
# \u User
# \h Hostname
# \w the current working  directory
# Verwende "\$(my_function)" im Prompt-String um einen Funktionsaufruf für jeden neuen Prompt-String zu tätigen.
# \# command number of this command

ttyinfo=$(tty)
ttyinfo=${ttyinfo##*dev/}
#BASE_PROMPT="\u@\h:(tty:${ttyinfo}):\wSHELL_LEVEL \t:\#"
BASE_PROMPT="\u@\h:(`tty | sed 's/\/dev\///'`):\wSHELL_LEVEL \t:\#"

#PROMPT_COMMAND=

# Promp Definition 
if [ "x$SHLVL" = "x1" ]; then
    BASE_PROMPT="${BASE_PROMPT/SHELL_LEVEL/}"
    # replace SHELL_LEVEL with nothing

    #PS1="\[\e[32m\][\[\e[m\]\[\e[31m\]\u\[\e[m\]\[\e[33m\]@\[\e[m\]\[\e[32m\]\h\[\e[m\]:\[\e[36m\]\w\[\e[m\]\[\e[32m\]]\[\e[m\]\[\e[32;47m\]\\$\[\e[m\] "
else
    BASE_PROMPT="${BASE_PROMPT/SHELL_LEVEL/($SHLVL)}"
    # replace SHELL_LEVEL with variable value
fi
# PSP Prompt String Part
# see: https://unix.stackexchange.com/a/105974
color_green="\[\e[1;32m\]"
no_color="\[\e[00m\]"

#PS1="\e[1;32m$BASE_PROMPT\e[m " / old
PS1="${color_green}${BASE_PROMPT}\n\$${no_color} "

PS2="\u@\h \w \! ++ "

#-------------------------------------------------------------------------------

set -o vi

#-------------------------------------------------------------------------------

pathappend \
    ~/scripts \
    /usr/local/go/bin

if [ -f ~/work.bashrc ]; then
    . ~/work.bashrc
fi
