# ---------------------------   Functions    -----------------------------------

# https://github.com/rwxrob/dot/blob/main/.bashrc
_pathclean() {
 local arg
 for arg in "$@"; do
    # middle
    PATH=${PATH//:${arg}:/:}
    # front
    PATH=${PATH/#${arg}:/}
    # end
    PATH=${PATH/%:${arg}/}
    export PATH
 done

}

pathappend() {
  # Appends to path only if argument is an existing directory.
  local arg
  for arg in "$@"; do
    _pathclean "${arg}"
    test -d "${arg}" || continue
    export PATH="${PATH:+"${PATH}:"}${arg}"
  done
}

pathprepend() {
  # Prepends to path only if argument is an existing directory.
  local arg
  for arg in "$@"; do
    _pathclean "${arg}"
    test -d "${arg}" || continue
    export PATH="${arg}${PATH:+":${PATH}"}"
  done
}

# navigate up the file hierarchy (Thanks to Derek Taylor (Distrotube))
up() {
    local d=""
    local limit="$1"

    if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
        limit=1
    fi

    for ((i=1; i<=limit; i++)); do
        d="../$d"
    done

    if ! cd "$d"; then
        echo "Couldn't go up $limit dirs."
    fi
}

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

if [ -r "${HOME}"/.bash.d/tools/qwe.bash ]; then
    source "${HOME}"/.bash.d/tools/qwe.bash
else
    printf "Could not source qwe.bash.\n"
fi

pathappend "${HOME}/scripts/general"

# file permissions: rwxr-xr-x
umask 022

# if bash is interactive shell ... bind ... and allow Ctrl-S to search forward through history by deactivating XON/XOFF (in KDE Konsole)
[[ $- = *i* ]] && bind TAB:menu-complete && stty -ixon

# Aktiviere Tab-Vervollständigung.
# siehe: https://superuser.com/questions/59175/is-there-a-way-to-make-bash-more-tab-friendly
# Mit Shift+Tab einen Eintrag in der Tab-Vervollständigung zurück gehen.
bind '"\e[Z":menu-complete-backward'

# Netter Trick ...
#     sudo ls -l | sudo dd of=/prod/test.txt
# ... falls man nicht in eine Datei umleiten darf
# (also "sudo ls -l > test.txt" ist nicht erlaubt)
# kann man es so dennoch erreichen.
# Siehe: https://stackoverflow.com/a/8213307

# Uncomment next line to enable the builtin emacs(1) command line editor
# in sh(1), e.g. C-a -> beginning-of-line.
# set -o emacs

shopt -s globstar

# ---------------------------   History  ---------------------------------------

export HISTCONTROL=ignoreboth
export HISTFILESIZE=1000
export HISTSIZE=1000
export HISTIGNORE="history*"
shopt -s histappend

# ---------------------------   Variables   ------------------------------------

export EDITOR=vim
export PAGER=less
export SVN_EDITOR=vim

# maybe add: --no-init
export LESS='--ignore-case --RAW-CONTROL-CHARS --quit-if-one-screen --jump-target=.5'
export SCRIPTS=${HOME}/scripts/general/
export SNIPPETS=${HOME}/scripts/general/snippet-scripts

# ---------------------------   Aliases   --------------------------------------
alias h='fc -l'
alias j=jobs
# m: Enthält dann z.B. 'more' (statt less) als Pager.
alias m='$PAGER'
alias c='clear'
alias cd..='cd ..'
alias cp='cp -v '
alias ,g='gmake '
alias ,gbi='gmake && gmake install'                        # (gmake) (b)uild and (i)nstall
alias ,gbior='gmake && gmake install && mp online restart' # (gmake) (b)uild and (i)nstall and (o)nline system (r)estart
alias ,gi='gmake install'
alias ,less='less -R'
alias ,vimeod='vim -S ~/vimsessions/eod-session.vim' # start vim with eod-session (end of day).
alias ,grep='grep --color=auto --extended-regexp'
alias ,pcregrep='pcregrep --color=auto --buffer-size=1M'
alias ,perl6r='rlwrap perl6'
alias ,dirsize="find . -type d -name '[!.]*' -exec du -sh {} +"
alias ,aff='#sudo find . -iname '"'"'*filename*'"'"' -exec realpath {} \+' # Template Alias
alias rlwrap='rlwrap '
alias sd='svn diff '
alias sk='skdiff '
alias rm='rm -Iv '
alias mv='mv -v '
alias xargs='xargs '
alias 2null='2>/dev/null'

# The space at the end is necessary for it to work!
alias sudo='sudo '
alias show-bindings="bind -p | grep -v '^#\|self-insert\|^$'"

# c = configure ... bash, etc.
alias cbash='vim ~/.bashrc'
alias cvim='vim ~/.vimrc'

# perl awk - see .inputrc for »shell-expand-line« binding (default emacs mode: C-M-e)
# -F implies -a autospit,  -n loop around
alias pawk='perl -lF'"\'"'/ /'"\'"' -E '"\'"'print \$F[0]'"\'"


# ---------------------------   Prompt Definition   ----------------------------
## BEGIN prompt definition {

# Genauere Zeit vllt. über Perl: perl -MTime::HiRes=gettimeofday -MPOSIX=strftime -e '($s,$us) = gettimeofday(); printf "%d.%06d\n", $s, $us'
# \t Zeit 24 in HH:MM:SS
# \u User
# \h Hostname
# \w the current working  directory
# Verwende "\$(my_function)" im Prompt-String um einen Funktionsaufruf für jeden neuen Prompt-String zu tätigen.
# \# command number of this command

# PSP Prompt String Part
# see: https://unix.stackexchange.com/a/105974
#color_green="\[\e[1;32m\]"
color_green="\e[1;32m"
#no_color="\[\e[00m\]"
no_color="\e[00m"

function prompt {
    local _ttyInfo
    _ttyInfo=$(tty)
    _ttyInfo=${_ttyInfo##*dev/}

    # For Readline's vi-(cmd|ins)-mode-string to work properly PS1 should be a single line string. (20220914)
    # If colors should be used in PS1 for vi-mode use \1, \2 to begin and end sequences of non-printing characters.
    # See also bash manual, Readline-Init-File, vi-xmd-mode-string for "\1 \2".
    #PS1=' (cn:\#) $ '
    # In front of PS1 the vi-mode-indicator is automatically displayed. (like: [+ $ my-cmd])
    PS1=' $ '
    #echo -e "${color_green}${USER}@${HOSTNAME}:($(tty | sed 's,/dev/,,')):[$(pwd)]($SHLVL) $(date '+%H:%M:%S')${no_color}"
    echo -e "${color_green}${USER}@${HOSTNAME}:(${_ttyInfo}):[$(pwd)]($SHLVL) $(date '+%H:%M:%S')${no_color}"
}


PROMPT_COMMAND='prompt'

PS2="\u@\h \w \! ++ "
## . END prompt definition }

#-------------------------------------------------------------------------------

set -o vi

#-------------------------------------------------------------------------------

pathappend "${HOME}/scripts/snippet-scripts" 
pathappend "${HOME}/scripts/cobol" 
pathappend "${HOME}/scripts/data" 
pathappend "${HOME}/scripts/project" 
pathappend "${HOME}/scripts/tmux" 
pathappend "${HOME}/scripts/work" 
pathappend "${HOME}/scripts/under_construction" 
pathappend "${HOME}/scripts/xdo" 

#pathappend /usr/local/go/bin

bash_config_dir="${HOME}/.config/bash"
if test -d "${bash_config_dir}"; then
    files=$(find "${bash_config_dir}" -maxdepth 1 -regextype egrep -regex ".+\.(ba)?sh$" -print)
    for file in ${files}; do 
        . "${file}"
    done
fi
unset bash_config_dir files file

function fcd() {
    local _first_matching_directory
    _first_matching_directory=$( find -E . -type d -iregex ".*$@.*" 2>/dev/null | head -n 1 )
    if [ -d "${_first_matching_directory}" ]; then
        cd "${_first_matching_directory}" || return
    fi
}

#-------------------------------------------------------------------------------

test -r "${HOME}/work.bashrc" && . "${HOME}/work.bashrc"

# Fuzzy Finder
test -r "${HOME}/.fzf.bash" && source "${HOME}/.fzf.bash"

