# don't strip characters to 7 bits when reading
set input-meta on

# allow iso-latin1 characters to be inserted rather than converted to
# prefix-meta sequences
set convert-meta off

# display characters with the eighth bit set directly rather than
# as meta-prefixed characters
set output-meta on

# If set to On, words which have more than one possible completion cause the
# matches to be listed immediately instead of ringing the bell.set
set show-all-if-ambiguous on

# >>>>> set "missing" vi behaviour >>>>>
set editing-mode vi

# Add a character to the beginning of the prompt indicating the editing mode:
# emacs (@), vi  command  (:)  or  vi insertion (+).
set show-mode-in-prompt on

# See man readline "VI Mode bindings" for default vi bindings.

# http://www.usenix.org.uk/content/bash.html#input
#vi mode
$if mode=vi

set keymap vi-command

Control-l: clear-screen

# nice to have
"#": insert-comment
"|": "A | "
".": "i !*\r"

"D":kill-line
"C": "Da"
"dw": kill-word
"dd": kill-whole-line
"db": backward-kill-word
"cc": "ddi"
"cw": "dwi"
"cb": "dbi"

"p": yank

"daw": "lbdW"
"yaw": "lbyW"
"caw": "lbcW"
"diw": "lbdw"
"yiw": "lbyw"
"ciw": "lbcw"
"da\"": "lF\"df\""
"di\"": "lF\"lmtf\"d`t"
"ci\"": "di\"i"
"ca\"": "da\"i"
"da'": "lF'df'"
"di'": "lF'lmtf'd`t"
"ci'": "di'i"
"ca'": "da'i"
"da`": "lF\`df\`"
"di`": "lF\`lmtf\`d`t"
"ci`": "di`i"
"ca`": "da`i"
"da(": "lF(df)"
"di(": "lF(lmtf)d`t"
"ci(": "di(i"
"ca(": "da(i"
"da)": "lF(df)"
"di)": "lF(lmtf)d`t"
"ci)": "di(i"
"ca)": "da(i"
"da{": "lF{df}"
"di{": "lF{lmtf}d`t"
"ci{": "di{i"
"ca{": "da{i"
"da}": "lF{df}"
"di}": "lF{lmtf}d`t"
"ci}": "di}i"
"ca}": "da}i"
"da[": "lF[df]"
"di[": "lF[lmtf]d`t"
"ci[": "di[i"
"ca[": "da[i"
"da]": "lF[df]"
"di]": "lF[lmtf]d`t"
"ci]": "di]i"
"ca]": "da]i"
"da<": "lF<df>"
"di<": "lF<lmtf>d`t"
"ci<": "di<i"
"ca<": "da<i"
"da>": "lF<df>"
"di>": "lF<lmtf>d`t"
"ci>": "di>i"
"ca>": "da>i"
"da/": "lF/df/"
"di/": "lF/lmtf/d`t"
"ci/": "di/i"
"ca/": "da/i"
"da:": "lF:df:"
"di:": "lF:lmtf:d`t"
"ci:": "di:i"
"ca:": "da:i"
"gg": beginning-of-history
"G": end-of-history
?: reverse-search-history
/: forward-search-history

# ATTENTION!
# For "gew" to work in command mode (after ESC and timeout) the cursor (or point) must be behind the glob pattern.
# See READLINE in bash manpage. The description of glob-expand-word mentions "point" (the cursor).
#
# Example:  (cursor at | )
# ls a*|  :  Will work.
# ls a|*  :  Will not work.
#
# The tricky bit is, when the line is written up to * and ESC is then pressed the cursor jumps back one character.
# The * is then not "visible" for the expansion. So the line must be written as follows (_ representing space, | cursor position or point):
# ls_a*_|
# ... then ESC ...
# ls_a*|_
# ... then gew
# .
"gew": glob-expand-word
"gle": glob-list-expansions
"sel": shell-expand-line
"ael": alias-expand-line

set keymap vi-insert
Control-l: clear-screen
"\C-a": beginning-of-line
"\C-e": end-of-line
#"\e[A": history-search-backward
#"\e[B": history-search-forward

# The following turns into Ctrl-j ??? WHY?
#"\C-*": glob-expand-word
"\egew": glob-expand-word
"\eael": alias-expand-line
$endif
# <<<<< set "missing" vi behaviour <<<<<

