" fileencoding for this file: utf-8
set nocompatible
set noerrorbells

set clipboard=unnamedplus,exclude:cons\|linux

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" ? check!
set smartindent

" Ignore casing when searching.
set ignorecase

" If an uppercase letter is used in a search adhere to casing altough in
" general the casing will be ignored.
set smartcase

set shiftround
set history=1000 

" Show the cursor position all the time
set ruler

set number
set relativenumber

" Always show the tabline.
set showtabline=2

" Set highlighting for search results.
set nohlsearch

" These amount to 'keep cursor on the center of the screen'
"set scrolloff=999
"set sidescrolloff=999

" Show at least some context lines if ie. a search match is on the last
" visible line of the buffer.
set scrolloff=8

" see: https://shapeshed.com/vim-statuslines/
" Always show status line (for window)
set laststatus=2

"------------------------------ build status line ------------------------------
" BEGIN build status line {
"
" Start with a clear statusline
set statusline=

" Always show the full path of the current file in the status line.
set statusline+=%F

" filetype eg. .txt .cob
set statusline+=\ %y

" If the fileencoding is different from the encoding, show the fileencoding.
set statusline+=\ %{&fileencoding?'fenc':'enc'}:%{&fileencoding?&fileencoding:&encoding}

set statusline+=\[%{&fileformat}\]

" % position in file
set statusline+=\ %p%%

" cursor line:column
set statusline+=\ %l:%c
" . END build status line }

"===============================================================================

" Allow modified buffers to be hidden.
set hidden

" Do not create .swp files.
set noswapfile

set nobackup
set nofixendofline
set undodir=~/.vim/undodir
set undofile
"set incsearch
set nowrap

" Wrap search if hitting file end/start
set wrapscan

set backspace=indent,eol,start
set ttyfast

set colorcolumn=80
"colorscheme evening
" colorscheme evening does not work as expected in windows/gvim.
" in combination with the following 
"     [highlight ColorColumn ctermbg=0 guibg=LightGrey]
" line the result ist red (!!) ColorColumns instead of LightGray. 
highlight ColorColumn ctermbg=0 guibg=LightGrey

" This block seems to disalbe the launch of gvim under FreeBSD KDE.
"if has("gui_running")
"  echo "yes, GUI\n"
"  if has("gui_kde")
"    echo "gui_kde\n"
"  elseif has("gui_gtk2") || has("gui_gtk3")
"    echo "gui_gtk2\n"
"    set guifont=Courier\ New\ 10
"  elseif has("x11")
"    echo "x11\n"
"    set guifont=-*-courier-medium-r-normal-*-*-180-*-*-m-*-*
"  elseif has("gui_win32")
"    echo "gui_win32\n"
"    set guifont=Hack:h8
"  endif
"else
"    echo "NO GUI\n"
"endif

"syntax on

filetype plugin on

" only load plugins if Plug detected
if filereadable(expand("~/.vim/autoload/plug.vim"))
  " Plug - plugin manager calls
  " https://github.com/junegunn/vim-plug/wiki/tips#migrating-from-other-plugin-managers
  call plug#begin('~/.vim/bundle')
  "Plug 'junegunn/seoul256.vim'
  "Plug 'junegunn/goyo.vim'
  "Plug 'junegunn/limelight.vim'
  "Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'
  Plug 'garbas/vim-snipmate'
  Plug 'honza/vim-snippets'
  Plug 'vim-perl/vim-perl'
  call plug#end()

  let g:snips_author="Pascal Ullrich"
endif

"filetype plugin indent on
"  2020-08-26: Prüfen, ob dies Probleme mit Cobol etc. bereitet. Falls ja, erst einmal ausschalten.

runtime macros/matchit.vim

" The following is the definition when used for cobol development in xterm - without unicode.
set listchars=eol:¬,tab:»·,trail:~,extends:>,precedes:<,space:·
" The following would be the unicode definition.
"set listchars=eol:Â¬,tab:â–¸\ ,trail:~,extends:>,precedes:<,space:Â·

"------------------------------------ mappings ---------------------------------

set showcmd

"set leader key to space
let mapleader=" "

" Set timeout length to x milliseconds
set timeoutlen=450

" Search and replace word under cursor using F4
"nnoremap <F4> :%s/<c-r><c-w>/<c-r><c-w>/gc<c-f>$F/i

" Toggle whitespace display.
nnoremap <F4> :set list!<CR>
inoremap <F4> <C-o>:set list!<CR>
cnoremap <F4> <C-c>:set list!<CR>

nnoremap <F5> :make<CR>
inoremap <F5> <C-o>:make<CR>
cnoremap <F5> <C-c>:make<CR>

nnoremap <F6> :!gmake install<CR>
inoremap <F6> <C-o>:!gmake install<CR>
cnoremap <F6> <C-c>:!gmake install<CR>

" update scripts
nnoremap <F7> :!us<CR>
inoremap <F7> <C-o>:!us<CR>
cnoremap <F7> <C-c>:!us<CR>

" kdiff3 current file with repo version
nnoremap <F8> :!skdiff % &<CR>
inoremap <F8> <C-o>:!skdiff % &<CR>
cnoremap <F8> <C-c>:!skdiff % &<CR>

"vmap ,c <ESC>a--><ESC>'<i<!--<ESC>'>$
" todo: surround beginning|end of visual selection with <!--|-->

" Make word-under-cursor a shell variable surrounded by braces.
" First insert-mode is entered, because when the word is the last one on the
" line its preceding space might/will get deleted when just 'diw' ist used.
" mnemonic: sv = shell variable
nnoremap <leader>sv i<C-o>diw${<C-r>"}<ESC>l

" Make word-under-cursor a double quoted shell variable surrounded by braces.
" mnemonic: sv" = shell variable with "-quotes
nnoremap <leader>sv" i<C-o>diw"${<C-r>"}"<ESC>l

" Substitute content of register 0 (default copy) with same content ... which
" the user then modifies as needed.
nnoremap <leader>s :%s,<C-r>0,<C-r>0,gc

" Adjust first non-whitespace to column 44.
"let @a='/\S44i 44|dw36|j'

" 'function!' overwrites/redefines the function if it already exists
function! Myadjust()
    " ra = right adjust
    if !exists("b:ra")
        echom "Bitte b:ra definieren mit >  :let b:ra = <spaltennr>"
        return
    endif
    :execute "normal! ".b:ra."i \<esc>".b:ra."|dw0".b:ra."|"
endfunction
nnoremap <silent> <leader>a :call Myadjust()<CR>

"" g<Ctrl+o> to create a new line below the cursor (Ctrl to prevent collision with 'go' command)
"nmap g<C-O> o<ESC>k
"" gO to create a new line above the cursor in normal mode
"nmap gO O<ESC>j

" la = line above
nnoremap <leader>la O<ESC>j
" lb = line below
nnoremap <leader>lb o<ESC>k 

"inoremap <leader>" ""<ESC>i
"inoremap <leader>( ()<ESC>i

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds


" Displays buffer list, prompts for buffer numbers and ranges and deletes
" associated buffers. Example input: 2 5,9 12
" Hit Enter alone to exit. 
function! InteractiveBufDelete()
    let l:prompt = 'Specify buffers to delete: '

    ls | let bufnums = input(l:prompt)
    while strlen(bufnums)
        echo "\n"
        let buflist = split(bufnums)
        for bufitem in buflist
            if match(bufitem, '^\d\+,\d\+$') >= 0
                exec ':' . bufitem . 'bd'
            elseif match(bufitem, '^\d\+$') >= 0
                exec ':bd ' . bufitem
            else
                echohl ErrorMsg | echo 'Not a number or range: ' . bufitem | echohl None
            endif 
        endfor
        ls | let bufnums = input(l:prompt)
    endwhile 

endfunction
nnoremap <silent> <leader>bd :call InteractiveBufDelete()<CR>

function! Saveeods()
    " ~ expansion works if put into a variable
    let eodfile = '~/vimsessions/eod-session.vim'
    exec ':mksession!' eodfile
    echom 'eod (end of day) session saved to ' eodfile ' (HARD CODED)'
endfunction

" Do not use these anymore. Use proper Esc or remap CapsLock or use Alt+hjkl.
" Map alternatives to the <ESC> key (<C-[> already is)
" 'jj' is impractical for me, because I often have to type 'jhjj' for german year abbreviation.
"inoremap jj <esc>
"cnoremap jj <esc>
"inoremap kk <esc>
"cnoremap kk <esc>
"inoremap kj <esc>
"cnoremap kj <esc>

" On a german keyboard it seems more intuitive to go forward without using a
" modifier key - like with f and t.
" ';' can only be activated using shift. So switch those around.
nnoremap , ;
nnoremap ; ,
vnoremap , ;
vnoremap ; ,

" Open vimrc (on Windows) when running the comamnd :Cvim.
command! WinCvim execute ':e ~\vimfiles\vimrc'

" Start vim in full screen mode on Windows.
"augroup windows_fullscreen
"   autocmd!
"   autocmd GUIEnter * simalt ~x
"augroup END

" BEGIN get cobol right align column from script {
function! SetCobolRightAlignColumn()
    "echom 'filetype is: '.&filetype
    " Check if FileType of current file/buffer is cobol (It can't just be
    " *.cob because copybooks do not have a file extension.)
    if &filetype != 'cobol' || exists("b:ra")
        return
    endif
    
    " TODO: Check if get_right_align_column.pl is available.
    " See:  :help expr-[:]  for '[:-2]'  :  Take all characters/bytes but the last one.
    let b:ra=system('get_right_align_column.pl ' . shellescape(expand('%')))[:-2]
    echom 'Setting right align column to ' . b:ra
endfunction

let save_shellredir = &shellredir
set shellredir=>

let &shellredir = save_shellredir
" . END get cobol right align column from script }

set autoread

augroup trigger_autoread
    autocmd!
    " Trigger `autoread` when files changes on disk
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
        \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

    " Notification after file change
    " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
    autocmd FileChangedShellPost *
        \ echohl WarningMsg | echo 'File changed on disk. Buffer reloaded.' | echohl None
augroup END

" https://stackoverflow.com/questions/36900578/correct-syntax-highlighting-on-subroutine-signatures-in-vim
let perl_sub_signatures=1

" see: :help viminfo, :help 'viminfo'|'vi
set viminfo='20,<1000,s1000

function! Report(msg)
    execute ":silent !echo "a:msg
    :silent echomsg a:msg
    sleep 500m
    :redraw!
endfunction

function! InWhichSection()
    let flags = "nbW"
    let sect_line = search('^\s\+\S\+\s\+section', flags)
    let sect_str = getline(sect_line)
    let sect_name = matchstr(sect_str, '\S\+')
    echo 'In section ['.sect_name.']'
endfunction
nnoremap <leader>ws :call InWhichSection()

" line-comment for XML-tag
nnoremap <leader>u 0/<!--<CR>d4l<Esc>/--><CR>d3l<Esc>0j:nohls<CR>
" Line-uncomment for XML-tag
nnoremap <leader>c 0^i<!--<C-O>$--><Esc>0j
" edit .vimrc
nnoremap <leader>cv :edit ~/.vimrc
" source .vimrc
nnoremap <leader>r :source ~/.vimrc
"
" go to section (Cobol)
nnoremap <leader>gts "syiW/\v\c<<C-R>s\s+section<CR>zz:nohls<CR>

" turn off highlighting for results of last search
nnoremap <leader>nh :nohls<CR>

set makeprg=gmake

" todo: How to do this?
"autocmd FocusGained,BufEnter if FileType = cobol setlocal colorcolumn=72 textwidth=72

augroup filetype_cobol
    autocmd!
    autocmd BufEnter * if &filetype == 'cobol' | call SetCobolRightAlignColumn() | endif
    autocmd FileType cobol setlocal textwidth=72
    autocmd FileType cobol setlocal colorcolumn=72
    autocmd FileType cobol :set indentexpr=
augroup END

"nnoremap <C-_> :echo 'word [' . expand('<cword>') . '] has length' strlen(substitute(expand('<cword>'), '.', 'x', 'g'))<CR>
nnoremap <leader>lw :echo 'word [' . expand('<cword>') . '] has length' strlen(expand('<cword>'))<CR>
nnoremap <leader>lW :echo 'WORD [' . expand('<cWORD>') . '] has length' strlen(expand('<cWORD>'))<CR>

" which section
"noremap <leader>ws ?section<CR>

" easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" more natural split opening
set splitright
set splitbelow
" Split vertically and go to file
nnoremap <leader>wf :vsplit<CR>gf
" Split vertically and go to line in file
nnoremap <leader>wF :vsplit<CR>gF

" navigate through the argument list
nnoremap <C-Right> :next<CR>
nnoremap <C-Left>  :previous<CR>

"" BEGIN search for visual selection {
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction
"" . END search for visual selection }

" Let Y behave like other capital letters in Vim. Yank to end of line.
nnoremap Y y$

" Keep search results centered
" n zz (center) zv (open folds if any)
nnoremap n nzzzv
nnoremap N Nzzzv

" join line below to current line without moving cursor using mark z
nnoremap J mzJ`z

" Create undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Move text
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==
nnoremap <leader>j :m .+1<CR>==
nnoremap <leader>k :m .-2<CR>==


set path+=./**
"===============================================================================
" Read work vim configuration
" (keep last to override)
let workvimrc = expand('~/work.vimrc.vim')
if filereadable(workvimrc)
    exec 'source' workvimrc
    call Report('sourced work.vimrc.vim')
else
    call Report('not sourcing work.vimrc.vim')
endif

